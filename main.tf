terraform {
  required_providers {
    portworx = {
      source = "registry.terraform.io/portworx/portworx"
    }
  }
}

provider "portworx" {
  endpoint  = "https://cloud.portworx.io/"
  api_token = var.api_token
}

#data "portworx_pds_template_revisions" "all" {}
#output "all" {
#  value = data.portworx_pds_template_revisions.all
#}


# create a new project
resource "portworx_platform_project" "project" {
  name        = "terraform example"
  description = "Project generated by Terraform"
  tenant_id  = var.tenant_id
  account_id   = var.account_id
}

# Create a new Resource Settings Template
resource "portworx_platform_template" "resource-small" {
  name        = "terraform-small"
  description = "terraform generated small"
  account_id  = var.account_id
  tenant_id   = var.tenant_id
  kind        = "pds:resource_settings"
  revision_id = var.resource_revision_id
  configuration = {
    cpu_request = "100m",
    cpu_limit  =  "500m",
    memory_request = "50M",
    memory_limit= "500M",
    storage_request = "10G"
  }
}

# Create a new Storage Settings Template
resource "portworx_platform_template" "storage" {
  name        = "tf-storage"
  description = "terraform generated"
  account_id  = var.account_id
  tenant_id   = var.tenant_id
  kind        = "pds:storage_options"
  revision_id = var.storage_revision_id
  configuration = {
    fs="ext4", 
    repl="1",
    fg="false",
    provisioner="pxd.portworx.com",
    secure="false"
  }
}

# Create a new mongodb Settings Template
resource "portworx_platform_template" "mongo" {
  name        = "tf-mongo"
  description = "terraform generated"
  account_id  = var.account_id
  tenant_id   = var.tenant_id
  kind        = "pds:service_configurations:mongodbs"
  revision_id = var.mongo_revision_id
  configuration = {
  }
}

# associate templates and project
resource "portworx_platform_project_association" "template" {
  account_id = var.account_id
  tenant_id  = var.tenant_id
  project_id = portworx_platform_project.project.id
  templates = [
    portworx_platform_template.mongo.id,
    portworx_platform_template.storage.id,        
    portworx_platform_template.resource-small.id
  ]
  namespaces = [
    var.namespace
  ]
}


data "portworx_pds_data_service_images" "mongo_latest" {
  data_service_id         = var.dataservice_mongo_id
  data_service_version_id = var.dataservice_mongo_version_id
  enabled                 = true
  latest                  = true
}
/*
output "img" {
   value = data.portworx_pds_data_service_images.mongo_latest.data_service_images.id
}
*/

resource "portworx_pds_deployment" "mongo" {
  name = "tf-mongo"
  description = "tf created mongodb"
  account_id = var.account_id
  tenant_id = var.tenant_id
  project_id = portworx_platform_project.project.id
  target_cluster_id = var.cluster
  namespace_id = var.namespace
  data_service_id = var.dataservice_mongo_id
  data_service_version_id = var.dataservice_mongo_version_id
  image_id = data.portworx_pds_data_service_images.mongo_latest.data_service_images[0].id
  topologies = [
    {
      name = "terraform"
      instances = "1"
      service_type = "LoadBalancer"
      resource_settings = {
        id = portworx_platform_template.resource-small.id
      }
      service_configurations = {
        id = portworx_platform_template.mongo.id
      }
      storage_options = {
        id = portworx_platform_template.storage.id
      }
    }
  ]
}        
